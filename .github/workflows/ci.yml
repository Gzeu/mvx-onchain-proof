name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Smart Contract Testing
  contract-test:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contract
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: wasm32-unknown-unknown
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          contract/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install MultiversX CLI
      run: |
        pip3 install multiversx-sdk-cli --upgrade --no-cache-dir
        mxpy --version
    
    - name: Install contract dependencies
      run: |
        mxpy deps install rust --overwrite
        sc-meta install all
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Build contract
      run: sc-meta all build --target-dir ../target --wasm-symbols
    
    - name: Generate ABI
      run: sc-meta all abi
    
    - name: Upload contract artifacts
      uses: actions/upload-artifact@v3
      with:
        name: contract-artifacts
        path: |
          contract/output/*.wasm
          contract/output/*.abi.json
        retention-days: 30

  # Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend-modern
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend-modern/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: frontend-modern/dist/
        retention-days: 30

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-audit
      run: cargo install cargo-audit --locked
    
    - name: Run security audit
      run: |
        cd contract
        cargo audit
    
    - name: Frontend security audit
      run: |
        cd frontend-modern
        npm audit --audit-level=high

  # Deploy to DevNet (on main branch)
  deploy-devnet:
    name: Deploy to DevNet
    runs-on: ubuntu-latest
    needs: [contract-test, frontend-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: devnet
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download contract artifacts
      uses: actions/download-artifact@v3
      with:
        name: contract-artifacts
        path: contract/output/
    
    - name: Install MultiversX CLI
      run: |
        pip3 install multiversx-sdk-cli --upgrade --no-cache-dir
        mxpy --version
    
    # Note: This would require wallet secrets in GitHub Secrets
    # - name: Deploy to DevNet
    #   env:
    #     WALLET_PEM: ${{ secrets.DEVNET_WALLET_PEM }}
    #   run: |
    #     cd contract
    #     echo "$WALLET_PEM" > walletKey.pem
    #     mxpy contract deploy \
    #       --bytecode=./output/onchain-proof.wasm \
    #       --pem=walletKey.pem \
    #       --gas-limit=100000000 \
    #       --proxy=https://devnet-gateway.multiversx.com \
    #       --chain=D \
    #       --send
    
    - name: Build and Deploy Frontend
      run: |
        cd frontend-modern
        npm ci
        npm run build
        echo "Frontend built successfully for DevNet deployment"
        # Add your preferred deployment method here (Vercel, Netlify, etc.)

  # Release (on tag creation)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [contract-test, frontend-test, security-audit]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download contract artifacts
      uses: actions/download-artifact@v3
      with:
        name: contract-artifacts
        path: contract/output/
    
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build-20.x
        path: frontend-build/
    
    - name: Create release archive
      run: |
        mkdir -p release-assets
        
        # Contract artifacts
        cp contract/output/*.wasm release-assets/
        cp contract/output/*.abi.json release-assets/
        
        # Frontend build
        tar -czf release-assets/frontend-build.tar.gz -C frontend-build .
        
        # Documentation
        cp README.md release-assets/
        cp LICENSE release-assets/
        
        # Create checksums
        cd release-assets
        sha256sum * > checksums.sha256
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-assets/*.wasm
          release-assets/*.abi.json
          release-assets/frontend-build.tar.gz
          release-assets/README.md
          release-assets/LICENSE
          release-assets/checksums.sha256
        body: |
          ## MultiversX OnChain Proof v${{ github.ref_name }}
          
          ### Smart Contract
          - `onchain-proof.wasm` - Compiled smart contract
          - `onchain-proof.abi.json` - Contract ABI for integration
          
          ### Frontend
          - `frontend-build.tar.gz` - Production React build
          
          ### Verification
          - `checksums.sha256` - File integrity verification
          
          See [README.md](README.md) for deployment instructions.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}